###### f_00_Arch_amd64-KLA-Hyprland_Wayland_pipewire.plug 
# Revision Date: 24March2024
# Copyright Sofiya Licence MIT (aka Wayland license)
# for use with build_firstrib_rootfs_XXX.sh to build:
# ./build_firstrib_rootfs.sh arch default amd64 f_00_Arch_amd64-KLA-Hyprland_Wayland_pipewire.plug 

# Full(ish) Wayland desktop exemplar for Arch Linux firstrib_rootfs ready for booting
# After using FR wiak initrd, login with user:spot password:spot
# Enter wifi details as needed, and then enter command startx if needed - wiak remove: need to fix some boot details maybe...
# For package ideas, you can refer for example to:
# https://wiki.archlinux.org/index.php/List_of_applications
# NOTE that all commandlines in this plugin will be executed within the build chroot.

# Some clean up from previous runs in case build_firstrib_rootfs or
# make00<distro>XXX being re-run to fetch packages that failed owing
# to repo timeouts or whatever (wiak remove: this and some other tweaks in script below may not be enough to guarantee correct second run - not sure):
[ -d /etc/skel ] && rm -rf /etc/skel
userdel -f firstrib
[ -d /home/firstrib ] && rm -rf /home/firstrib
userdel -f spot
[ -d /home/spot ] && rm -rf /home/spot

### START package manager install---------------------------------------
# Note ESSENTIAL; need full wget since busybox wget can't handle https
pacman -Syu
echo wget \
| xargs -n1 pacman -S --noconfirm --needed --disable-download-timeout

## install some MAIN packages including wpa_supplicant and busybox for wifi connectivity
# PROBABLY BEST TO TREAT AS ESSENTIAL
echo tzdata systemd-sysvcompat dosfstools mtools procps-ng which wpa_supplicant busybox giblib ntfs-3g light \
| xargs -n1 pacman -S --noconfirm --needed --disable-download-timeout

# Make some network-related applet symlinks for above busybox
cd /usr/bin; ln -s busybox ash; ln -s /usr/lib/systemd/systemd init  # wiak remove: recently seemed to need this link to systemd
# Hopefully not required...: ln -s busybox ip; ln -s busybox route; ln -s busybox ifconfig; ln -s busybox ping; ln -s busybox udhcpc;
cd ../..

## install OPTIONAL KERNEL/MODULES/FIRMWARE
# NOTE: leave linux and linux-firmware out for huge kernel builds such as kernel from KLV-Airedale:
# When pacman installs linux this scripts uses default mkinitcpio option
# Also provides modules optionally required by later FirstRib initramfs build
#echo linux linux-firmware sof-firmware \
#| xargs -n1 pacman -S --noconfirm --needed --disable-download-timeout
echo sof-firmware \
| xargs -n1 pacman -S --noconfirm --needed --disable-download-timeout

# Ignore kernel upgrade during future pacman -Syu
# Note: if desired to upgrade kernel+related-modules you also have to do change the modules used by initrd as well.
# Easy if using huge kernel KLV-type mechanism though - otherwise need to uncompress/recompress initrd
# Surrounding such sed lines with if check, so only done once if script re-run - wiak: to check such measures throughout script
if ! grep -q 'IgnorePkg = linux' /etc/pacman.conf; then
  sed -i '/#IgnorePkg/ a IgnorePkg = linux' /etc/pacman.conf
fi

## install NON-GUI APPS SELECTION
# 
# Changing this selection may require you to also edit desktop apps menu
# 
echo sudo xdg-utils xorg-xwininfo pciutils cpio unzip iproute2 file exfatprogs \
hyprland wlroots foot fuzzel swaync squashfs-tools usleep usbutils \
grim slurp swaybg waybar wofi rofi mako brightnessctl \
xdg-desktop-portal-hyprland hyprwayland-scanner micro kitty \
bluez bluez-utils bluez-deprecated-tools blueman smplayer \
gxmessage xz zstd zip p7zip translate-shell snappy \
dialog convmv rsync zsync wmctrl netpbm hddtemp \
libjpeg6-turbo wireless_tools iw cliphist wl-clipboard \
networkmanager network-manager-applet inetutils \
git cmake avahi nss-mdns python-requests python3 python-dbus dbus-glib btop htop \
wayland-utils wev wtype wf-recorder wob \
wlr-randr wlsunset wlogout playerctl seatd \
qt5-wayland qt5ct qt6-wayland jq yad xorg-xwayland \
gvfs gvfs-mtp gvfs-smb gparted swappy hyprlock hypridle hyprpaper \
cups cups-filters cups-pdf kvantum gufw \
hyprpicker sakura cava azote nwg-drawer \
pipewire wireplumber pamixer pipewire-pulse pipewire-alsa qpwgraph \
| xargs -n1 pacman -S --noconfirm --needed --disable-download-timeout

# Add ~/Startup directory
#
mkdir -p /home/spot/Startup
cat <<'EOF' >> /usr/local/bin/start-up
#!/bin/bash
sleep 3
user_home=$(eval echo ~${SUDO_USER})
ls $user_home/Startup/* | while read J
do
   "$J" &
done
EOF

chmod +x /usr/local/bin/start-up

# Add /etc/hostname
touch /etc/hostname
cat <<'EOF' >> /etc/hostname
archlinux
EOF

hostname archlinux

# Add /etc/host
cat <<'EOF' >> /etc/host
# Static table lookup for hostnames.
# See hosts(5) for details.arch linux
127.0.0.1 localhost archlinux
::1 localhost archlinux
192.168.1.1 pc2
192.168.1.2 pc3
192.168.1.3 pc4
# advert-blocker IPs below
# advert-blocker IPs above
EOF

## install fonts / ttf-nerd-fonts-symbols / ttf-nerd-fonts-symbols-mono 
echo ttf-dejavu ttf-font-awesome noto-fonts-emoji cantarell-fonts ttf-roboto \
| xargs -n1 pacman -S --noconfirm --needed --disable-download-timeout

## install EXTRA APPS GUI-MAINLY SELECTION
pacman -Syu
echo pavucontrol polkit polkit-kde-agent dconf xarchiver \
yad neofetch fish nwg-look xfce4-terminal \
thunar thunar-archive-plugin thunar-volman tumbler \
galculator imv lxtask xdg-user-dirs \
lxtask leafpad geany mtpaint vim conky \
zenity maim cmatrix imagemagick lsb-release \
| xargs -n1 pacman -S --noconfirm --needed --disable-download-timeout

# NOTE In practice neither hardinfo gdmap appear to be available any more
# in Arch official repos so will thus install either or both via other mechanism

### START GENERAL CONFIGURATION-----------------------------------------
pwconv
grpconv
printf "root\nroot\n" | passwd >/dev/null 2>&1 # Quietly set default root passwd to "root"
# set root to use /bin/bash
usermod --shell /bin/bash root

# Give login user spot no-password admin polkit access rights
mkdir -p /etc/polkit-1/rules/
cat <<'49POLKIT' > /etc/polkit-1/rules/49-nopasswd-wheel.rules
polkit.addRule(function(action, subject) {
    if (subject.user == "spot")
    {
        return polkit.Result.YES;
    }
});
49POLKIT

## START config systemd --------------

# Create systemd override to achieve root autologin (per Arch Wiki)
# Remove this section if not wanting autologin of root
mkdir -p /etc/systemd/system/getty@tty1.service.d/
cat <<'AUTOLOGIN' > /etc/systemd/system/getty@tty1.service.d/override.conf
[Service]
ExecStart=
ExecStart=-/usr/bin/agetty --autologin spot --noclear %I $TERM
AUTOLOGIN

# Commented out to not enable wiakwifi since using NetworkManager instead:
# systemctl enable wiakwifi
systemctl enable NetworkManager

# Remove this section if not wanting boot straight into wayland sway
cat <<'AUTOLOGIN' > /etc/profile.d/autologin.sh
# autologin on tty1
if [ -z "${WAYLAND_DISPLAY}" ] && [ "${XDG_VTNR}" -eq 1 ]; then
  dbus-run-session -- Hyprland   # use 'exec ...' here if you don't want back to tty1 on exit
fi
AUTOLOGIN

# Change to fancy prompt via .bashrc
# https://unix.stackexchange.com/questions/255789/is-there-a-way-to-prevent-sed-from-interpreting-the-replacement-string
# VAR='PS1="\[\e[0;36m\]┌──\[\e[0m\][ \[\e[0;33m\]\u\[\e[0m\]\[\e[0;32m\]@\[\e[0;36m\]\h\[\e[0m\] ] [ \[\e[0;36m\]\t\[\e[0m\] ]\n\[\e[0;36m\]├── \[\e[0;32m\]\w\[\e[0;36m\]\n\[\e[0;36m\]└>\[\e[0m\]"'
# { printf '%s\n' "$VAR";cat /etc/bash.bashrc; } | sed '1{h;d;};/PS1=/g' > /home/spot/.bashrc

# Set locale to en_US.UTF-8 
sed -i 's/#en_US.UTF-8 UTF-8/en_US.UTF-8 UTF-8/' /etc/locale.gen
sed -i 's/LANG="C.UTF-8/#LANG="C.UTF-8/' /etc/locale.conf
echo "LANG=en_US.UTF-8" >> /etc/locale.conf
echo "LANG=en_US.UTF-8" >> /etc/environment
locale-gen

# Install wd_timezone changer
cat <<'WDTIMEZONE' > /usr/local/bin/wd_timezone
#!/bin/sh
# wd_timezone: Set timezone
# Copyright William McEwan (wiak) 29Jan2023+ Licence MIT 
# Created 29Jan2023; Revised 29Jan2023
# fredx181, 13Mar2023, use list for yad gui
progname="wd_timezone"; version=0.0.1; revision=-rc1

case "$1" in
  '-v'|'--version') printf "$progname ${version}${revision}\n"; exit 0;;
  '-h'|'--help'|'-?') printf "Set timezone. Usage:
Execute: wd_timezone (then set timezone)\n";exit 0;;
esac

_tzones="`timedatectl list-timezones | xargs`"

_result=`yad --title="Set Timezone" --center --on-top \
--image-on-top \
--image=/usr/share/pixmaps/timezone-icon.svg \
--text="Choose timezone" \
--text-align=center \
--separator=" " \
--height=400 --width=300 --list --editable --column Timezone $_tzones`

_timezone=`printf "$_result" | cut -d" " -f1`

# Set timezone
timedatectl set-timezone "$_timezone"
exit 0
WDTIMEZONE
chmod +x /usr/local/bin/wd_timezone

cat <<'WDTIMEZONEDESKTOP' > /usr/share/applications/wd_timezone.desktop
[Desktop Entry]
Name=Timezone
GenericName=wd_timezone
Comment=Set Timezone
Exec=/usr/local/bin/wd_timezone
Terminal=false
Icon=/usr/share/pixmaps/timezone-icon.svg
Type=Application
Categories=Settings;DesktopSettings;
WDTIMEZONEDESKTOP

## Install Save2flash
wget -c https://gitlab.com/sofija.p2018/kla-ot2/-/raw/main/Arch-KLA-Hyprland/Arch-save2flash/save2flash.tar.xz -O /save2flash.tar.xz
tar xJf /save2flash.tar.xz && rm /save2flash.tar.xz
#-----------------------------------------------------------------------

## Install Pamac libpamac-aur 
# Create and switch to build directory
cd /var/cache/pacman/pkg
wget -c https://gitlab.com/sofija.p2018/kla-ot2/-/raw/main/pamac-aur-libpamac-aur/libpamac-aur-11.7.3-5-x86_64.pkg.tar.zst
wget -c https://gitlab.com/sofija.p2018/kla-ot2/-/raw/main/pamac-aur-libpamac-aur/pamac-aur-11.7.3-4-x86_64.pkg.tar.zst
## wget -c https://gitlab.com/sofija.p2018/kla-ot2/-/raw/main/Arch-KLA-Hyprland/programs/nwg-drawer-0.4.8-1-any.pkg.tar.zst
## wget -c https://gitlab.com/sofija.p2018/kla-ot2/-/raw/main/Arch-KLA-Hyprland/programs/hyprpicker-0.2.0-2-x86_64.pkg.tar.zst 
## wget -c https://gitlab.com/sofija.p2018/kla-ot2/-/raw/main/Arch-KLA-Hyprland/programs/sakura-3.8.7-1-x86_64.pkg.tar.zst
wget -c https://gitlab.com/sofija.p2018/kla-ot2/-/raw/main/Arch-KLA-Hyprland/programs/wlogout-git-r99.bc76e5d-1-x86_64.pkg.tar.zst
## wget -c https://gitlab.com/sofija.p2018/kla-ot2/-/raw/main/Arch-KLA-Hyprland/programs/cava-0.10.1-1-any.pkg.tar.zst 
wget -c https://gitlab.com/sofija.p2018/kla-ot2/-/raw/main/Arch-KLA-Hyprland/programs/checkupdates-systemd-git-r8.c8dd565-1-any.pkg.tar.zst
wget -c https://gitlab.com/sofija.p2018/kla-ot2/-/raw/main/Arch-KLA-Hyprland/programs/yay-12.4.2-1-x86_64.pkg.tar.zst
wget -c https://gitlab.com/sofija.p2018/kla-ot2/-/raw/main/Arch-KLA-Hyprland/programs/wdisplays-1.1.1-1-x86_64.pkg.tar.zst
wget -c https://gitlab.com/sofija.p2018/kla-ot2/-/raw/main/Arch-KLA-Hyprland/programs/tty-clock-2.3-2-x86_64.pkg.tar.zst
wget -c https://gitlab.com/sofija.p2018/kla-ot2/-/raw/main/Arch-KLA-Hyprland/programs/epdfview-git-0.2.0.r28.g6f907bd-2-x86_64.pkg.tar.zst
wget -c https://gitlab.com/sofija.p2018/kla-ot2/-/raw/main/Arch-KLA-Hyprland/programs/hardinfo2-2.1.17-1-x86_64.pkg.tar.zst
## wget -c https://gitlab.com/sofija.p2018/kla-ot2/-/raw/main/Arch-KLA-Hyprland/programs/azote-1.12.7-1-any.pkg.tar.zst
echo libpamac-aur-11.7.3-5-x86_64.pkg.tar.zst pamac-aur-11.7.3-4-x86_64.pkg.tar.zst \
wlogout-git-r99.bc76e5d-1-x86_64.pkg.tar.zst hardinfo2-2.1.17-1-x86_64.pkg.tar.zst \
checkupdates-systemd-git-r8.c8dd565-1-any.pkg.tar.zst yay-12.4.2-1-x86_64.pkg.tar.zst \
wdisplays-1.1.1-1-x86_64.pkg.tar.zst tty-clock-2.3-2-x86_64.pkg.tar.zst epdfview-git-0.2.0.r28.g6f907bd-2-x86_64.pkg.tar.zst \
| xargs -n1 pacman -U --noconfirm --needed --disable-download-timeout

### END usrlocalbin scripts---------------------------------------------
#-----------------------------------------------------------------------

# Configure system for multi-users
#
cp -af /root/. /etc/skel
mkdir -p /etc/skel/.config /etc/skel/.cache /etc/skel/.local/share
#
# Give wheel group nopasswd sudo rights and create firstrib as wheel group member
# PREV (was wrong I think...): groupadd sudo && 
echo '%wheel ALL=(ALL) NOPASSWD: ALL' | (VISUAL="tee -a" visudo) # wheel group added to sudo no password required
useradd -m -G audio,video,wheel,storage -s /bin/bash firstrib  # firstrib in wheel group so has elevated sudo permissions
printf "firstrib\nfirstrib" | passwd firstrib >/dev/null 2>&1 # Quietly set default firstrib passwd to "firstrib"

# Create user spot and put in wheel group (and more) and give wheel group nopasswd sudo rights
echo '%wheel ALL=(ALL) NOPASSWD: ALL' | (VISUAL="tee -a" visudo) # wheel group added to sudo no password required
useradd -m -G audio,video,wheel,storage -s /bin/bash spot
printf "spot\nspot" | passwd spot >/dev/null 2>&1 # Quietly set default spot passwd to "spot"

# Some default configs for root 
#
# Default ~/ directories
mkdir -p ~/Desktop ~/Documents ~/Downloads ~/Music ~/Pictures ~/Public ~/Templates ~/Videos
mkdir -p ~/my-applications ~/Startup

# Some default configs for /home/spot 
#
# Default /home/spot directories
mkdir -p /home/spot/Desktop /home/spot/Documents /home/spot/Downloads /home/spot/Music /home/spot/Pictures /home/spot/Public /home/spot/Templates /home/spot/Videos
mkdir -p /home/spot/my-applications /home/spot/Startup /home/spot/Pictures/Screenshots

# Set permissions
#
chown -R spot:spot /home/spot
chown -R firstrib:firstrib /home/firstrib
usermod -a -G seat spot

##----------------------------------------------------------------------

# Restore busybox network-related links if required
# If required the following should, I think, be done at very end of 
# plugin to avoid conflicts with any pacman network-related app installs
cd /usr/bin; ln -s busybox ip; ln -s busybox route; ln -s busybox ifconfig; ln -s busybox arp; ln -s busybox ping; ln -s busybox udhcpc
cd ../..

# Empty pacman pkg cache
printf "%s\n%s\n" y y | pacman -Scc

# Avahi-daemon autostart
# systemctl enable avahi-daemon
# avahi-set-host-name $(hostname)
# systemctl disable avahi-daemon
# enable systemd avahi-daemon.service / avahi-daemon.socket / dbus-org.freedesktop.Avahi.service
ln -s /usr/lib/systemd/system/avahi-daemon.service /etc/systemd/system/multi-user.target.wants/
ln -s /usr/lib/systemd/system/avahi-daemon.service /etc/systemd/system/dbus-org.freedesktop.Avahi.service
mkdir -p /etc/systemd/system/sockets.target.wants
ln -s /usr/lib/systemd/system/avahi-daemon.socket /etc/systemd/system/sockets.target.wants/

# systemctl enable cups.service / systemctl start cups.service
mkdir -p /etc/systemd/system/printer.target.wants
ln -s /usr/lib/systemd/system/cups.service /etc/systemd/system/printer.target.wants/cups.service
ln -s /usr/lib/systemd/system/cups.service /etc/systemd/system/multi-user.target.wants/cups.service
ln -s /usr/lib/systemd/system/cups.socket /etc/systemd/system/sockets.target.wants/cups.socket
ln -s /usr/lib/systemd/system/cups.path /etc/systemd/system/multi-user.target.wants/cups.path

# Bluetooth (systemctl enable bluetooth)
# add blueman to autostart and activate systemd bluetooth module
ln -s /usr/lib/systemd/system/bluetooth.service /etc/systemd/system/dbus-org.bluez.service
mkdir -p /etc/systemd/system/bluetooth.target.wants
ln -s /usr/lib/systemd/system/bluetooth.service /etc/systemd/system/bluetooth.target.wants/bluetooth.service 

# pipewire pipewire-pulse wireplumber - service
# systemctl enable --user pipewire pipewire-pulse wireplumber 
mkdir -p /home/spot/.config/systemd/user
mkdir -p /home/spot/.config/systemd/user/default.target.wants
ln -s /usr/lib/systemd/user/pipewire.service /home/spot/.config/systemd/user/default.target.wants/pipewire.service
mkdir -p /home/spot/.config/systemd/user/sockets.target.wants
ln -s /usr/lib/systemd/user/pipewire.socket /home/spot/.config/systemd/user/sockets.target.wants/pipewire.socket
ln -s /usr/lib/systemd/user/pipewire-pulse.service /home/spot/.config/systemd/user/default.target.wants/pipewire-pulse.service
ln -s /usr/lib/systemd/user/pipewire-pulse.socket /home/spot/.config/systemd/user/sockets.target.wants/pipewire-pulse.socket
ln -s /usr/lib/systemd/user/wireplumber.service /home/spot/.config/systemd/user/pipewire-session-manager.service
mkdir -p /home/spot/.config/systemd/user/pipewire.service.wants
ln -s /usr/lib/systemd/user/wireplumber.service /home/spot/.config/systemd/user/pipewire.service.wants/wireplumber.service

# systemctl enable ufw 
ln -s /usr/lib/systemd/system/ufw.service /etc/systemd/system/multi-user.target.wants/ufw.service

# systemctl enable saveatshutdown.service
ln -s /usr/lib/systemd/system/saveatshutdown.service /etc/systemd/system/multi-user.target.wants/saveatshutdown.service

# systemctl enable seatd.service 
ln -s /usr/lib/systemd/system/seatd.service /etc/systemd/system/multi-user.target.wants/seatd.service

# systemctl enable hddtemp.service
# ln -s /usr/lib/systemd/system/hddtemp.service /etc/systemd/system/multi-user.target.wants/hddtemp.service

# TIMEZONE SETUP
# enable systemd systemd-timesyncd.service
mkdir -p /etc/systemd/system/sysinit.target.wants
ln -s /usr/lib/systemd/system/systemd-timesyncd.service /etc/systemd/system/sysinit.target.wants/systemd-timesyncd.service
current_timezone="Etc/UTC"
ln -sf /usr/share/zoneinfo/${current_timezone} /etc/localtime
printf "\nCurrent timezone is: %s\n" ${current_timezone}
printf "To change timezone, open a terminal and enter the command: tzselect\n"
